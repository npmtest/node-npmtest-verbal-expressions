{"/home/travis/build/npmtest/node-npmtest-verbal-expressions/test.js":"/* istanbul instrument in package npmtest_verbal_expressions */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-verbal-expressions/lib.npmtest_verbal_expressions.js":"/* istanbul instrument in package npmtest_verbal_expressions */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_verbal_expressions = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_verbal_expressions = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-verbal-expressions/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-verbal-expressions && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_verbal_expressions */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_verbal_expressions\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_verbal_expressions.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_verbal_expressions.rollup.js'] =\n            local.assetsDict['/assets.npmtest_verbal_expressions.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_verbal_expressions.__dirname + '/lib.npmtest_verbal_expressions.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-verbal-expressions/node_modules/verbal-expressions/VerbalExpressions.js":"/*!\n * VerbalExpressions JavaScript Library v0.3.0\n * https://github.com/VerbalExpressions/JSVerbalExpressions\n *\n *\n * Released under the MIT license\n * http://opensource.org/licenses/MIT\n */\n\n/**\n* Define the VerbalExpression class.\n* @class\n*/\n(function verbalExpressionIIFE(root) {\n    // Constants\n    var MODULE_NAME = 'VerEx';\n\n    /**\n    * I am the constructor function.\n    * @constructor\n    * @alias VerEx\n    * @return {RegExp} A new instance of RegExp with injected methods\n    */\n    function VerbalExpression() {\n        var verbalExpression = new RegExp();\n\n        // Add all the class methods\n        VerbalExpression.injectClassMethods(verbalExpression);\n\n        // Return the new object.\n        return verbalExpression;\n    }\n\n    /**\n    * @param {RegExp} verbalExpression An instance of RegExp on which to add VerbalExpressions methods\n    * @return {RegExp} A new instance of RegExp with injected methods\n    */\n    VerbalExpression.injectClassMethods = function injectClassMethods(verbalExpression) {\n        var method;\n        // Loop over all the prototype methods\n        for (method in VerbalExpression.prototype) {\n            // Make sure this is a local method.\n            if (VerbalExpression.prototype.hasOwnProperty(method)) {\n                // Add the method\n                verbalExpression[method] = VerbalExpression.prototype[method];\n            }\n        }\n\n        return verbalExpression;\n    };\n\n    /**\n    * Define the class methods.\n    */\n    VerbalExpression.prototype = {\n        // Variables to hold the whole\n        // expression construction in order\n        _prefixes: '',\n        _source: '',\n        _suffixes: '',\n        _modifiers: 'gm', // default to global multiline matching\n\n        /**\n        * Sanitation function for adding anything safely to the expression\n        * @param {String} value string to sanitize\n        * @return {String} sanitized value\n        */\n        sanitize: function sanitize(value) {\n            var reRegExpEscape;\n\n            if (value.source) {\n                return value.source;\n            }\n\n            if (typeof value === 'number') {\n                return value;\n            }\n\n            // Regular expression meta characters, URL: https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/regexp\n            reRegExpEscape = /([\\].|*?+(){}^$\\\\:=[])/g;\n\n            // Escape RegExp special characters only\n            // $& => Last match, URL: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastMatch\n            return value.replace(reRegExpEscape, '\\\\$&');\n        },\n\n        /**\n        * Function to add stuff to the expression. Also compiles the new expression so it's ready to be used.\n        * @param {string} value literal expression, not sanitized\n        * @return {VerbalExpression} Freshly recompiled instance of VerbalExpression\n        */\n        add: function add(value) {\n            this._source += value || '';\n            this.compile(this._prefixes + this._source + this._suffixes, this._modifiers);\n\n            return this;\n        },\n\n        /**\n        * Control start-of-line matching\n        * @param {Boolean} enable Control start-of-line matching\n        * @return {VerbalExpression} Same instance of VerbalExpression to allow method chaining\n        */\n        startOfLine: function startOfLine(enable) {\n            enable = (enable !== false);\n            this._prefixes = enable ? '^' : '';\n            return this.add();\n        },\n\n        /**\n        * Control end-of-line matching\n        * @param {Boolean} enable Control end-of-line matching\n        * @return {VerbalExpression} Same instance of VerbalExpression to allow method chaining\n        */\n        endOfLine: function endOfLine(enable) {\n            enable = (enable !== false);\n            this._suffixes = enable ? '$' : '';\n            return this.add();\n        },\n\n        /**\n        * We try to keep the syntax as user-friendly as possible. So we can use the \"normal\" behaviour to split the \"sentences\" naturally.\n        * @param {String} value value to find\n        * @return {VerbalExpression} Same instance of VerbalExpression to allow method chaining\n        */\n        then: function then(value) {\n            value = this.sanitize(value);\n            return this.add('(?:' + value + ')');\n        },\n\n        /**\n        * And because we can't start with \"then\" function, we create an alias to be used as the first function of the chain.\n        * @param {String} value value to find\n        * @return {VerbalExpression} Same instance of VerbalExpression to allow method chaining\n        */\n        find: function find(value) {\n            return this.then(value);\n        },\n\n        /*\n        * Maybe is used to add values with ?\n        * @param {String} value value to find\n        * @return {VerbalExpression} Same instance of VerbalExpression to allow method chaining\n        */\n        maybe: function maybe(value) {\n            value = this.sanitize(value);\n            return this.add('(?:' + value + ')?');\n        },\n\n        /**\n        * Any character any number of times\n        * @param {String} value value to find\n        * @return {VerbalExpression} Same instance of VerbalExpression to allow method chaining\n        */\n        anything: function anything() {\n            return this.add('(?:.*)');\n        },\n\n        /**\n        * Anything but these characters\n        * @param {String} value value to find\n        * @return {VerbalExpression} Same instance of VerbalExpression to allow method chaining\n        */\n        anythingBut: function anythingBut(value) {\n            value = this.sanitize(value);\n            return this.add('(?:[^' + value + ']*)');\n        },\n\n        /**\n        * Any character at least one time\n        * @return {VerbalExpression} Same instance of VerbalExpression to allow method chaining\n        */\n        something: function something() {\n            return this.add('(?:.+)');\n        },\n\n        /**\n        * Any character at least one time except for these characters\n        * @param {String} value value to find\n        * @return {VerbalExpression} Same instance of VerbalExpression to allow method chaining\n        */\n        somethingBut: function somethingBut(value) {\n            value = this.sanitize(value);\n            return this.add('(?:[^' + value + ']+)');\n        },\n\n        /**\n        * Shorthand function for the String.replace function to give more logical flow if, for example, we're doing multiple replacements on one regexp.\n        * @param {String} source string to search for\n        * @param {String} value value to replace with\n        * @return {VerbalExpression} Same instance of VerbalExpression to allow method chaining\n        */\n        replace: function replace(source, value) {\n            source = source.toString();\n            return source.replace(this, value);\n        },\n\n        /// Add regular expression special ///\n        /// characters                     ///\n\n        /**\n        * Line break\n        * @return {VerbalExpression} Same instance of VerbalExpression to allow method chaining\n        */\n        lineBreak: function lineBreak() {\n            return this.add('(?:\\\\r\\\\n|\\\\r|\\\\n)'); // Unix + Windows CRLF\n        },\n\n        /**\n        * And a shorthand for html-minded\n        * @return {VerbalExpression} Same instance of VerbalExpression to allow method chaining\n        */\n        br: function br() {\n            return this.lineBreak();\n        },\n\n        /**\n        * Tab (duh?)\n        * @return {VerbalExpression} Same instance of VerbalExpression to allow method chaining\n        */\n        tab: function tab() {\n            return this.add('\\\\t');\n        },\n\n        /**\n        * Any alphanumeric\n        * @return {VerbalExpression} Same instance of VerbalExpression to allow method chaining\n        */\n        word: function word() {\n            return this.add('\\\\w+');\n        },\n\n        /**\n        * Any digit\n        * @return {VerbalExpression} Same instance of VerbalExpression to allow method chaining\n        */\n        digit: function digit() {\n            this.add('\\\\d');\n            return this;\n        },\n\n        /**\n        * Any whitespace\n        * @return {VerbalExpression} Same instance of VerbalExpression to allow method chaining\n        */\n        whitespace: function whitespace() {\n            return this.add('\\\\s');\n        },\n\n        /**\n        * Any given character\n        * @param {String} value value to find\n        * @return {VerbalExpression} Same instance of VerbalExpression to allow method chaining\n        */\n        anyOf: function anyOf(value) {\n            value = this.sanitize(value);\n            return this.add('[' + value + ']');\n        },\n\n        /**\n        * Shorthand\n        * @param {String} value value to find\n        * @return {VerbalExpression} Same instance of VerbalExpression to allow method chaining\n        */\n        any: function any(value) {\n            return this.anyOf(value);\n        },\n\n        /**\n        * Usage: .range( from, to [, from, to ... ] )\n        * @return {VerbalExpression} Same instance of VerbalExpression to allow method chaining\n        */\n        range: function range() {\n            var length = arguments.length;\n\n            // Create a string buffer instead of concatenating on iteration\n            var buffer = new Array(length / 2);\n            var index = 0;\n            var i = 0;\n            var from;\n            var to;\n\n            buffer[index++] = '[';\n\n            while (i < length) {\n                from = this.sanitize(arguments[i++]);\n                to = this.sanitize(arguments[i++]);\n                buffer[index++] = from + '-' + to;\n            }\n\n            buffer[index++] = ']';\n\n            return this.add(buffer.join(''));\n        },\n\n        /// Modifiers      ///\n\n        /**\n        * Modifier abstraction\n        * @param {String} modifier modifier to add\n        * @return {VerbalExpression} Same instance of VerbalExpression to allow method chaining\n        */\n        addModifier: function addModifier(modifier) {\n            if (this._modifiers.indexOf(modifier) === -1) {\n                this._modifiers += modifier;\n            }\n\n            return this.add();\n        },\n\n        /**\n        * Remove modifier\n        * @param {String} modifier modifier to remove\n        * @return {VerbalExpression} Same instance of VerbalExpression to allow method chaining\n        */\n        removeModifier: function removeModifier(modifier) {\n            this._modifiers = this._modifiers.replace(modifier, '');\n            return this.add();\n        },\n\n        /**\n        * Case-insensitivity modifier\n        * @param {Boolean} enable Control case-insensitive matching\n        * @return {VerbalExpression} Same instance of VerbalExpression to allow method chaining\n        */\n        withAnyCase: function withAnyCase(enable) {\n            return enable !== false ? this.addModifier('i') : this.removeModifier('i');\n        },\n\n        /**\n        * Default behaviour is with \"g\" modifier, so we can turn this another way around than other modifiers\n        * @param {Boolean} enable Control global matching\n        * @return {VerbalExpression} Same instance of VerbalExpression to allow method chaining\n        */\n        stopAtFirst: function stopAtFirst(enable) {\n            return enable !== false ? this.removeModifier('g') : this.addModifier('g');\n        },\n\n        /**\n        * Multiline, also reversed\n        * @param {Boolean} enable Control multi-line matching\n        * @return {VerbalExpression} Same instance of VerbalExpression to allow method chaining\n        */\n        searchOneLine: function searchOneLine(enable) {\n            return enable !== false ? this.removeModifier('m') : this.addModifier('m');\n        },\n\n        /**\n        * Repeats the previous item exactly n times or between n and m times.\n        * @return {VerbalExpression} Same instance of VerbalExpression to allow method chaining\n        */\n        repeatPrevious: function repeatPrevious() {\n            var value;\n            var reIsInteger = /\\d+/;\n            var length = arguments.length;\n            var values = new Array(length);\n            var i = 0;\n            var j = 0;\n            for (i = 0; i < length; i++) {\n                if (reIsInteger.test(arguments[i])) {\n                    values[j++] = arguments[i];\n                }\n            }\n\n            if (j > 0) {\n                // Set the new length of the array, thus reducing to the elements that have content\n                values.length = j;\n                value = '{' + values.join(',') + '}';\n            }\n\n\n            return this.add(value);\n        },\n\n        /**\n        * Repeats the previous at least once\n        * @return {VerbalExpression} Same instance of VerbalExpression to allow method chaining\n        */\n        oneOrMore: function oneOrMore() {\n            return this.add('+');\n        },\n\n        /// Loops  ///\n\n        /**\n        * Matches the value zero or more times\n        * @param {String} value value to find\n        * @return {VerbalExpression} Same instance of VerbalExpression to allow method chaining\n        */\n        multiple: function multiple(value) {\n            // Use expression or string\n            value = value.source || this.sanitize(value);\n            if (arguments.length === 1) {\n                this.add('(?:' + value + ')*');\n            }\n\n            if (arguments.length > 1) {\n                this.add('(?:' + value + ')');\n                this.add('{' + arguments[1] + '}');\n            }\n\n            return this;\n        },\n\n        /**\n        * Adds alternative expressions\n        * @param {String} value value to find\n        * @return {VerbalExpression} Same instance of VerbalExpression to allow method chaining\n        */\n        or: function or(value) {\n            this._prefixes += '(?:';\n            this._suffixes = ')' + this._suffixes;\n\n            this.add(')|(?:');\n            if (value) {\n                this.then(value);\n            }\n\n            return this;\n        },\n\n        /**\n        * Starts a capturing group\n        * @return {VerbalExpression} Same instance of VerbalExpression to allow method chaining\n        */\n        beginCapture: function beginCapture() {\n            // Add the end of the capture group to the suffixes for now so compilation continues to work\n            this._suffixes += ')';\n            return this.add('(');\n        },\n\n        /**\n        * Ends a capturing group\n        * @return {VerbalExpression} Same instance of VerbalExpression to allow method chaining\n        */\n        endCapture: function endCapture() {\n            // Remove the last parentheses from the _suffixes and add to the regex itself\n            this._suffixes = this._suffixes.substring(0, this._suffixes.length - 1);\n            return this.add(')');\n        },\n\n        /**\n        * Convert to RegExp object\n        * @return {RegExp} Converted RegExp instance\n        */\n        toRegExp: function toRegExp() {\n            var array = this.toString().match(/\\/(.*)\\/([gimuy]+)?/);\n            return new RegExp(array[1], array[2]);\n        }\n    };\n\n    /**\n    * @return {VerbalExpression} Returns a new instance of VerbalExpressions\n    */\n    function createVerbalExpression() {\n        return new VerbalExpression();\n    }\n\n    // UMD (Universal Module Definition), URL: https://github.com/umdjs/umd\n    // Supports AMD, CommonJS and the browser\n    if (typeof module !== 'undefined' && module.exports) {\n        // Node.js Module\n        module.exports = createVerbalExpression;\n    } else if (typeof define === 'function' && define.amd) {\n        // AMD Module\n        define(MODULE_NAME, [], function define() {\n            return VerbalExpression;\n        });\n    } else {\n        // Browser\n        root[MODULE_NAME] = createVerbalExpression;\n    }\n}(this));\n","/home/travis/build/npmtest/node-npmtest-verbal-expressions/node_modules/verbal-expressions/Gruntfile.js":"module.exports = function gruntConfig(grunt) {\n    grunt.initConfig({\n        pkg: grunt.file.readJSON('package.json'),\n\n        eslint: {\n            options: {\n                configFile: '.eslintrc',\n            },\n            target: ['VerbalExpressions.js', 'test/tests.js'],\n        },\n\n        qunit: {\n            files: ['test/index.html'],\n        },\n\n        copy: {\n            build: {\n                src: '<%= pkg.main %>',\n                dest: 'dist/verbalexpressions.js',\n            },\n        },\n\n        uglify: {\n            options: {\n                banner: '/*!\\n' +\n                    '* <%= pkg.name %> JavaScript Library v<%= pkg.version %>\\n' +\n                    '* <%= pkg.homepage %>\\n' +\n                    '*\\n' +\n                    '*\\n' +\n                    '* Released under the <%= pkg.license %> license\\n' +\n                    '*\\n' +\n                    '* Date: <%= grunt.template.today(\"yyyy-mm-dd\") %>\\n' +\n                    '*\\n' +\n                    '*/\\n',\n                sourceMap: true,\n            },\n            dist: {\n                files: {\n                    'dist/verbalexpressions.min.js': ['<%= pkg.main %>'],\n                },\n            },\n        },\n\n        sourcemap_localize: {\n            options: {\n                localize_to: '..',\n            },\n            build: {\n                files: {\n                    src: ['dist/*.min.js.map'],\n                },\n            },\n        },\n\n        jsdoc: {\n            options: {\n                pedantic: true,\n                verbose: true,\n                readme: 'README.md',\n                package: 'package.json',\n            },\n            src: {\n                options: {\n                    destination: 'docs',\n                },\n                src: ['VerbalExpressions.js'],\n            },\n            dist: {\n                options: {\n                    destination: 'dist/docs',\n                },\n                src: ['dist/verbalexpressions.js'],\n            },\n        },\n    });\n\n    grunt.loadNpmTasks('grunt-contrib-copy');\n    grunt.loadNpmTasks('grunt-contrib-qunit');\n    grunt.loadNpmTasks('grunt-contrib-uglify');\n    grunt.loadNpmTasks('grunt-eslint');\n    grunt.loadNpmTasks('grunt-jsdoc');\n    grunt.loadNpmTasks('grunt-sourcemap-localize');\n\n    grunt.registerTask('test', ['eslint', 'qunit']);\n    grunt.registerTask('default', ['qunit']);\n    grunt.registerTask('build', ['test', 'copy', 'uglify', 'sourcemap_localize', 'jsdoc:dist']);\n    grunt.registerTask('docs', ['test', 'jsdoc:src']);\n};\n"}